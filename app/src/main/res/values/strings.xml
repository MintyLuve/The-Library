<resources>
    <string name="app_name">The Library</string>

    <string name="long_text_1">Imagine you have to go grocery shopping. You have to buy apples, bananas, milk, maybe some eggs.. but how would you organize this information? You wouldn’t just have a bunch of sticky notes, you would write it all down in a list. An array is like a shopping list. Each item on the list would be an element in the array, and you can easily manage and change all of the items while still keeping it in a structured order. Each item occupies a specific position in the list, called an index. So if your array was apples, bananas, milk, eggs, then milk would be at index 3.</string>
    <string name="long_text_2">An array is used to store lists of related information. All elements of an array must be of the same data type. So you can’t put the number 1 and the letter C in the same array. But, it is very easy to alter and go through an array using the index. If you decided that you didn’t want apples and instead wanted oranges, you would just change index 1 from ‘apples’ to ‘oranges’. The rest of the list remains unchanged, but now you know that you are buying oranges.</string>
    <string name="long_text_3">The issue comes in when you need to add elements to an array. Arrays only have a set amount of elements, and once they are created that can’t be changed. So your shopping list can only have four items. How do you add more items to your list after you created it initially?</string>
    <string name="long_text_4">A linked list is a different way of storing a list of related information. Instead of knowing where each element of a list is with indexes, each element of a list (called a node) knows what the next node is. A linked list only knows what its head (the first node of the list) is. Each node can point to the node that comes after it. For example, you want your list to be oranges, bananas, milk, then yogurt. If you wanted to know how far in the list milk is, you would start with the head, oranges, and work your way through the list until you get to yogurt. To traverse a list, you begin at the head (oranges), then go to the next node (bananas), then the next node (milk), and finally it would reach the desired node (yogurt).</string>
    <string name="long_text_5">Now, how do you add elements into a linked list? Since all nodes are ‘linked’ together by knowing what the next node is, to add a node at the end of the list all you need to do is change what the last node’s next node is. Let’s say you want to add cheese to the end of the list. So you need to traverse the list (head (oranges) → next (bananas) → next (milk) → next (yogurt)), and then change the next node to be cheese.</string>
    <string name="long_text_6">Now let\'s say you need to get strawberries. They’re located near the bananas, so you would want to get them after bananas. To insert an element in the middle of the list, you have to change the previous node’s next to be your new node, and change the new node’s next node to be the previous node’s next node. This is a little confusing, so think of it this way. The list is oranges → bananas → milk → yogurt → cheese. You want to add strawberries after bananas. So bananas’ next node would become strawberries, and strawberries’ next node would be milk. See the image for more clarification.</string>
    <string name="long_text_7">Deleting a node is very similar to adding a node. To delete a node, you remove all references to it. So you would set the previous node’s next node to be the current node’s next node, and change the current node’s next node to be nothing. Let’s say that you don’t need to get milk anymore. Your current list is oranges → bananas → strawberries → milk → yogurt → cheese. To remove milk, you would set strawberries’ next node to be yogurt, and set milk’s next node to be nothing. This would make milk inaccessible from the list, therefore remove it.</string>
    <string name="long_text_8">A linked list is a modular way to hold lots of data of the same type. A linked list works by having a bunch of individual nodes which hold data, and each node knows what the next node is. To traverse a list, you start at the head, and keep going to the next node until you reach your desired node. To add or delete a node, you change the surrounding node’s next nodes until the list is in place. You’ll learn more about how to use a linked list in the next lesson.</string>
    <string name="long_text_9">A linked list is a data structure where each node holds a piece of information and points to the next node in the list. They allow you to easily add or remove information from anywhere in the sequence, unlike an array where everything is in a fixed order. Essentially, it\'s a way to store data where each piece knows where to find the next piece in the line.</string>
    <string name="long_text_10">In the previous lesson, you learned about a linked list where you are only given the head, and each node knows the next node. This type of list is called a singly linked list, because there is only a single link between nodes. Another type of linked list is a doubly linked list, where there are two links between nodes. Each node knows its next node, but it also knows its previous node. This allows for you to traverse through the list in both directions, either going forward or backward. You’re given the first node, the head, and you’re given the last node, called the tail.</string>
    <string name="long_text_11">If you remember from the last lessons, the example of a shopping list was used to learn what a singly linked list is. A good example of a doubly linked list is a web browser history, where each page knows the page after and before it. So imagine you started on Google, searched “Shoes”, then clicked on a shoe store. This page history would be saved as a doubly linked list: Nothing ← Google ⇌ “Shoes” Search ⇌ Shoe Store → Nothing. Google would be the head, while Shoe Store would be the tail. To traverse the list, you’d be able to start at either the head or the tail, and go forwards or backwards.</string>
    <string name="long_text_12">Adding nodes into a doubly linked list is very similar to singly linked lists, just with a few more steps. It’s important to make sure all of the next and previous nodes are connected, and that there are no loose ends. Let\'s start with adding to the end of the list. While on the Shoe Store page, you go to the Learn More page. You can go straight to the tail, and set the tail’s next node to be the new node. Then you set the new node’s previous node to be the tail, and the next node to be nothing. Then you have to set the new node to become the new tail, so the ‘tail’ still references the end of the list.</string>
    <string name="long_text_13">When you add a node in the middle of a doubly linked list, you have to change both the next and the previous nodes to make sure that everything is connected. Let\'s say that before you clicked Learn More, you viewed a page about Shoe Quality. To insert this into the list, you would set the tail’s previous node’s next node to be your new node, and your new node’s previous node to be the tail’s previous node. Then you would set your new node’s next node to be the tail, and the tail’s previous node to be the new node. In terms of this example, you would set Shoe Store’s next node to be Shoe Quality, and Shoe Quality’s previous node to be Shore Store. Then you would set Shoe Quality’s next node to be Learn More, and Learn More’s previous node to be Shoe Quality. This handles all four links to make sure they are still connected.</string>
    <string name="long_text_14">Again, deleting nodes from a doubly linked list is very similar to deleting nodes from a singly linked list, as long as you handle all connections. To delete a node, you remove all references to that node. Having no references means that it can not be accessed, which removes it from the list. Let’s say that you never clicked on the Shoe Store page, and just went straight to Shoe Quality. You would change “Shoes” Search’s next node to be Shoe Quality, and set Shoe Quality’s previous node to be “Shoes” Search. Then, you would set Shoe Store’s next and previous nodes to be nothing.</string>
    <string name="long_text_15">A doubly linked list is a data structure that knows what its head and tail are, and each node holds data and knows what the previous and next nodes are. Having two links between nodes makes it very easy to traverse the list, being able to traverse forwards or backwards through the list from either the head or tail respectively. To add or delete a node, you change the surrounding node’s next and previous nodes until all the nodes are linked correctly. You’ll learn about more usages of doubly linked lists, and when you should use a singly linked list VS a doubly linked list in the next lesson.</string>

    <string name="question_1">If you didn’t want eggs and instead wanted yogurt, what index would you change to yogurt?</string>
    <string name="question_2">What index is bananas?</string>
    <string name="question_3">What would strawberries’ next node be?</string>
    <string name="question_4">What would strawberries’ next node be?</string>
    <string name="question_5">How would you get the ‘tail’ of a singly linked list?</string>
    <string name="question_6">If you are at the tail and you hit previous three times, what would you end up with?</string>
    <string name="question_7">How many nodes would you have to travel to get from the head to the tail?</string>
    <string name="question_8">What would Shoe Store’s next node’s next node be?</string>
</resources>